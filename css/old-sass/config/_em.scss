@function em($targets, $font-size: 10) {
  $debug: true;

  // Enforce fewer than 5 target values
  @if length($targets) > 4 {
    @error 'ERROR: Too many arguments (#{length($targets)}). Maximum is 4.';
  }

  // Ensure that font-size is a number
  @if type-of($font-size) != number {
    @error 'ERROR: font-size must be a number instead of a #{type-of($font-size)}.';
  } @else if type-of($font-size) == number and not unitless($font-size) {
    @if $debug == true {
      @warn 'Do not use a unit with $font-size';
    }
    $font-size: strip-unit($font-size);
  }

  $list: ();

  @each $target in $targets {
    @if type-of($target) == number {
      // Warn if called with a unit
      @if not unitless($target) {
        @if $debug == true {
          @warn 'Do not call em function with a unit';
        }
        $target: strip-unit($target);
      }
      // Don't add units to 0
      @if $target / $font-size == 0 {
        $list: append($list, $target / $font-size);
      } @else {
        $list: append($list, $target / $font-size + em);
      }
    } @else if $target == auto {
      // Don't allow auto without other numbers
      @if length($list) < 2 {
        @error 'ERROR: Cannot use auto in em function without including numbers to convert to em.';
      }
      $list: append($list, $target);
    } @else if $target == inherit or $target == initial {
      // Do not allow inherit or initial in shorthand
      @error 'ERROR: Cannot use #{$target} in shorthand declarations.';
    } @else {
      // Prevent typos
      @error 'ERROR: Invalid keyword passed to em function #{target}.';
    }
  }
  @return $list;
}
